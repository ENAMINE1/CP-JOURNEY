{
    "Problem Template": {
        "prefix": "CP-main",
        "body": [
            "// Date: ${CURRENT_DATE}-${CURRENT_MONTH}-${CURRENT_YEAR} ",
            "// Start Time: ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
            "// End Time  : ",
            "// Time Taken: ",
            "// Author: Shashwat Kumar",
            "// QUESTION LINK: ",
            "// Rating: ",
            "// Description: ",
            "// Solved: ",
            "// Learning: ",
            "",
            "/****************************************************Pre Processor***************************************************/",
            "#include <bits/stdc++.h>",
            "#include <algorithm>",
            "using namespace std;",
            "#ifdef LOCAL",
            "#include \"./lib/debug.h\"",
            "#include \"./lib/print.h\"",
            "#else",
            "#define debug(...) 42",
            "#endif",
            "#define endl '\\n'",
            "/***************************************************Main Function**************************************************/",
            "",
            "void solve()",
            "{",
            "    ${1:/* Your code here */}",
            "}",
            "",
            "signed main()",
            "{",
            "    auto begin = std::chrono::high_resolution_clock::now();",
            "    ios_base::sync_with_stdio(false);",
            "    cin.tie(NULL);",
            "    std::cout.tie(NULL);",
            "",
            "    int t = 1;",
            "    cin >> t;",
            "    for (int i = 1; i <= t; i++)",
            "    {",
            "#ifdef LOCAL",
            "        std::cerr << \"Case # \" << i << endl;",
            "        std::cout << \"Case #\" << i << endl;",
            "#endif",
            "        solve();",
            "    }",
            "    auto end = std::chrono::high_resolution_clock::now();",
            "    auto elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);",
            "    cerr << \"Time measured: \" << elapsed.count() * 1e-9 << \" seconds.\\n\";",
            "    return 0;",
            "}"
        ],
        "description": "Template for coding problem solutions with metadata comments"
    },
    "UnionFind": {
        "prefix": "unionfind",
        "body": [
            "struct UnionFind {",
            "    int n, set_size, *parent, *rank;",
            "",
            "    UnionFind() {}",
            "",
            "    UnionFind(int a) {",
            "        n = set_size = a;",
            "        parent = new int[n + 1];",
            "        rank = new int[n + 1];",
            "        reset();",
            "    }",
            "",
            "    // path compression",
            "    int find(int x) {",
            "        if (x != parent[x])",
            "            return parent[x] = find(parent[x]);",
            "        return x;",
            "    }",
            "",
            "    // rank compression",
            "    void merge(int x, int y) {",
            "        int xroot = find(x);",
            "        int yroot = find(y);",
            "        if (xroot != yroot) {",
            "            if (rank[xroot] >= rank[yroot]) {",
            "                parent[yroot] = xroot;",
            "                rank[xroot] += rank[yroot];",
            "            } else {",
            "                parent[xroot] = yroot;",
            "                rank[yroot] += rank[xroot];",
            "            }",
            "            set_size -= 1;",
            "        }",
            "    }",
            "",
            "    void reset() {",
            "        set_size = n;",
            "        for (int i = 1; i <= n; i++) {",
            "            parent[i] = i;",
            "            rank[i] = 0;",
            "        }",
            "    }",
            "",
            "    int size() {",
            "        return set_size;",
            "    }",
            "",
            "    void print() {",
            "        for (int i = 1; i <= n; i++) {",
            "            cout << i << \" -> \" << parent[i] << endl;",
            "        }",
            "    }",
            "};"
        ],
        "description": "C++ UnionFind struct with path and rank compression"
    },
    "Insert current date and time as comment": {
        "prefix": "Date_time_author",
        "body": [
            "// Date: ${CURRENT_DATE}-${CURRENT_MONTH}-${CURRENT_YEAR} ",
            "// Time: ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
            "// Author: ${YOUR NAME}"
        ],
        "description": "Insert the current date and time as a comment."
    }
}